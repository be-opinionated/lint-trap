name: "Lint Trap"
description: "A Github Action that removes the lint from your code"
inputs:
  fix-commands:
    description: "Commands to run that run your auto-formatters"
    required: true
    default: |
      make autoformat
  commit-message:
    description: "Commit message to use"
    default: "chore(lint): automatically reformat code with formatting tools"
  shell:
    description: "Shell to use to run the auto-formatters"
    default: bash
  git-name:
    description: "Name for Lint Trap to use in git commits."
    default: "Lint Trap[bot]"
  git-email:
    description: "Email for Lint trap in git commits.."
    default: "lint-trap-bot@bots.noreply.github.com"
  git-blame-ignore-revs:
    description: "Name of file to which do add revisions for ignoring. Leave unset if you don't want to ignore lint-trap's commits."
    default: ""

runs:
  using: 'composite'
  steps:
    - if: ${{ github.event.pull_request.number }}
      run: |
        gh pr checkout ${{ github.event.pull_request.number }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - shell: bash
      run: |
        git fetch --force
        git pull
    - shell: ${{ inputs.shell }}
      run: |
        ${{ inputs.fix-commands }}
    - shell: bash
      run: |
        git config user.name "${{ inputs.git-name }}"
        git config user.email "${{ inputs.git-email }}"
        git add --update
        if [[ $(git diff-index test-and-docs) ]]; then
          git commit -m "${{ inputs.commit-message }}"
          if [[ -n "${{ inputs.git-blame-ignore-revs }}" ]]; then
            ignore_commit=$(git log -n 1 -q | head -n 1 | cut -d' ' -f2)
            echo "# Lint-trap auto-reformat." > ${{ inputs.git-blame-ignore-revs }}
            echo "${ignore_commit}" > ${{ inputs.git-blame-ignore-revs }}
          fi
          git push
        else
          echo "::info::No changes to repository, not updating..."
        fi
      env:
        GH_TOKEN: ${{ github.token }}

